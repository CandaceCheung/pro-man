name: deployment

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

env:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  SERVER_HOST: 3.99.24.127
  SERVER_USER: ubuntu
  SERVER_DIR: /home/ubuntu/ci
  BUCKET_NAME: pro-man
  CLOUDFRONT_DISTRIBUTION: EKRUAGLLBRRY0
  AWS_DEFAULT_REGION: us-east-1

jobs:
  build-react:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        working-directory: frontend
        run: yarn install
      - name: build project
        working-directory: frontend
        env:
          REACT_APP_API_SERVER: https://api.pro-man.co
          REACT_APP_PUBLIC_HOSTNAME: https://pro-man.co
        run: yarn build
      - name: archive react built files
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: frontend/build

  build-node:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        working-directory: server
        run: |
          yarn install
      - name: build project
        working-directory: server
        run: |
          yarn build
      - name: archive built files
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: server/dist

  test-node:
      needs: build-node
      runs-on: ubuntu-latest
      container: node:lts-alpine
      services:
        db:
          image: postgres:latest
          env:
            POSTGRES_DB: ${{env.POSTGRES_DB}}
            POSTGRES_USER: ${{env.POSTGRES_USER}}
            POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          ports:
            - 5432:5432
      env:
        PORT: 8080
        DB_HOST: db
        DB_PORT: 5432
      steps:
        - uses: actions/checkout@v3
        - name: restore built files
          uses: actions/download-artifact@v3
          with:
            name: dist
            path: server/dist
        - name: check built files
          working-directory: server
          run: |
            ls dist/knexfile.js
            ls dist/migrations/*.js
            ls dist/src/server.js
        - name: install deps
          working-directory: server
          run: |
            npm i --omit=dev
        - name: migrate db
          working-directory: server/dist
          run: |
            npx knex migrate:latest
        - name: run test
          working-directory: server
          run: |
            npm run ci

  build-docker:
      needs: 
        - build-node
      runs-on: ubuntu-latest
      container: docker:20.10.21-alpine3.16
      steps:
        - uses: actions/checkout@v3
        - name: restore built files server
          uses: actions/download-artifact@v3
          with:
            name: dist
            path: server/dist
        - name: check built files in server
          working-directory: server
          run: |
            ls dist/knexfile.js
            ls dist/migrations/*.js
            ls dist/src/server.js
        - name: build docker image for server
          working-directory: server
          run: |
            sudo docker build -t server .
        - name: export docker image in server
          run: |
            mkdir docker-files
            cp docker-compose.yml docker-files/
            sudo docker save server > docker-files/server.img
        - name: archive docker files
          uses: actions/upload-artifact@v3
          with:
            name: docker-files
            path: docker-files

  setup-ssh:
      runs-on: ubuntu-latest
      steps:
        - name: setup ssh files
          run: |
            cd
            mkdir -p .ssh
            cd .ssh
            echo "${{secrets.SSH_PRIVATE_KEY}}" > id_rsa
            chmod 400 id_rsa
            ssh-keyscan ${{env.SERVER_HOST}} >> known_hosts
            echo "" >> config
            echo "Host server" >> config
            echo "  Hostname ${{env.SERVER_HOST}}" >> config
            echo "  User ${{env.SERVER_USER}}" >> config
            pwd
            find
        - name: check ssh connection
          run: |
            ssh server "sudo docker ps"
        - name: archive ssh setup
          uses: actions/upload-artifact@v3
          with:
            name: .ssh
            path: ~/.ssh

  deploy-docker:
      needs:
        - build-docker
        - test-node
        - setup-ssh
      runs-on: ubuntu-latest
      steps:
        - name: restore ssh setup
          uses: actions/download-artifact@v3
          with:
            name: .ssh
            path: ssh-tmp
        - name: check ssh connection
          run: |
            mv ssh-tmp ~/.ssh
            cd ~/.ssh
            chmod 400 id_rsa
            ssh server whoami
        - name: restore docker image
          uses: actions/download-artifact@v3
          with:
            name: docker-files
        - name: check docker image
          run: |
            file server.img
            file docker-compose.yml
        - name: upload docker files
          run: |
            rsync -SavLPz server.img server:${{env.SERVER_DIR}}
            ssh server "sudo docker load < ${{env.SERVER_DIR}}/server.img"
            rsync -SavLPz docker-compose.yml server:${{env.SERVER_DIR}}
            ssh server "cd ${{env.SERVER_DIR}} && docker-compose up -d"

  deploy-react:
    needs:
        - build-react
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: restore built files frontend
        uses: actions/download-artifact@v3
        with:
          name: build
          path: frontend/build
      - name: check built files in server
        working-directory: frontend
        run: |
          ls build/index.html
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - name: deploy to s3 and cloudfront
        working-directory: frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws s3 sync ./build s3://${{env.BUCKET_NAME}} --delete
          aws cloudfront create-invalidation --distribution-id ${{env.CLOUDFRONT_DISTRIBUTION}} --paths "/*"