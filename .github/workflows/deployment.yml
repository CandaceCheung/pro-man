name: deployment

on:
  push:
    branches:
      - 'production'
  workflow_dispatch:

env:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  SERVER_HOST: 3.99.24.127
  SERVER_USER: ubuntu
  SERVER_DIR: /home/ubuntu/
  BUCKET_NAME: pro-man
  CLOUDFRONT_DISTRIBUTION: EKRUAGLLBRRY0
  AWS_DEFAULT_REGION: us-east-1
  DOCKER_REPO_NAME: cmyip6/pro-man:latest
  CI: false

jobs:
  build-react:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        working-directory: frontend
        run: yarn install
      - name: build project
        working-directory: frontend
        env:
          REACT_APP_PUBLIC_HOSTNAME: https://pro-man.co
        run: yarn build
      - name: archive react built files
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: frontend/build

  build-node:
    runs-on: ubuntu-latest
    container: node:lts-alpine
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        working-directory: server
        run: |
          yarn install
      - name: build project
        working-directory: server
        env:
          REACT_APP_PUBLIC_HOSTNAME: https://api.pro-man.co
          EMAIL_LOGIN: pro-man2217@outlook.com
          EMAIL_PASSWORD: TeckyCanada2222
        run: |
          yarn build
      - name: archive built files
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: server/dist

  test-node:
      needs: build-node
      runs-on: ubuntu-latest
      container: node:lts-alpine
      services:
        db:
          image: postgres:latest
          env:
            POSTGRES_DB: ${{env.POSTGRES_DB}}
            POSTGRES_USER: ${{env.POSTGRES_USER}}
            POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          ports:
            - 5432:5432
      env:
        PORT: 8080
        DB_HOST: db
        DB_PORT: 5432
      steps:
        - uses: actions/checkout@v3
        - name: restore built files
          uses: actions/download-artifact@v3
          with:
            name: dist
            path: server/dist
        - name: check built files
          working-directory: server
          run: |
            ls dist/knexfile.js
            ls dist/migrations/*.js
            ls dist/app.js
        - name: install deps
          working-directory: server
          run: |
            yarn install
        - name: migrate db
          working-directory: server
          run: |
            yarn knex migrate:latest
        - name: run test
          working-directory: server
          run: |
            yarn test

  build-docker:
      needs: 
        - build-node
      runs-on: ubuntu-latest
      container: docker:20.10.21-alpine3.16
      steps:
        - uses: actions/checkout@v3
        - name: restore built files server
          uses: actions/download-artifact@v3
          with:
            name: dist
            path: server/dist
        - name: check built files in server
          working-directory: server
          run: |
            ls dist/knexfile.js
            ls dist/migrations/*.js
            ls dist/app.js
        - name: build docker image for server
          working-directory: server
          run: |
            docker build -t server .
        - name: export docker image in server
          working-directory: server
          run: |
            mkdir docker-files
            cp docker-compose.yml docker-files/
            docker save server > docker-files/server.img
        - name: Login to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Do Docker tag and push
          working-directory: server
          run: |
            docker tag server:latest ${{ env.DOCKER_REPO_NAME }}
            docker push ${{ env.DOCKER_REPO_NAME }}
        - name: Archive docker-compose.yml
          uses: actions/upload-artifact@v3
          with:
            name: docker-compose
            path: server/docker-compose.yml

  setup-ssh:
      runs-on: ubuntu-latest
      steps:
        - name: setup ssh files
          run: |
            cd
            mkdir -p .ssh
            cd .ssh
            echo "${{secrets.SSH_PRIVATE_KEY}}" > id_rsa
            chmod 400 id_rsa
            ssh-keyscan ${{env.SERVER_HOST}} >> known_hosts
            echo "" >> config
            echo "Host server" >> config
            echo "  Hostname ${{env.SERVER_HOST}}" >> config
            echo "  User ${{env.SERVER_USER}}" >> config
            pwd
            find
        - name: check ssh connection
          run: |
            ssh server "sudo docker ps"
        - name: archive ssh setup
          uses: actions/upload-artifact@v3
          with:
            name: .ssh
            path: ~/.ssh

  deploy-docker:
      needs:
        - build-docker
        - test-node
        - setup-ssh
      runs-on: ubuntu-latest
      steps:
        - name: restore built files
          uses: actions/download-artifact@v3
          with:
            name: docker-compose
            path: server
        - name: copy file via ssh key
          uses: appleboy/scp-action@master
          with:
            host: ${{ env.SERVER_HOST }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            username: ${{ env.SERVER_USER }}
            source: "server/docker-compose.yml"
            target: ${{ env.SERVER_DIR }}
        - name: Executing remote ssh
          uses: appleboy/ssh-action@v0.1.5
          with:
            host: ${{ env.SERVER_HOST }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            username: ${{ env.SERVER_USER }}
            script: |
              cd ${{ env.SERVER_DIR }}
              mv server/docker-compose.yml docker-compose.yml && rm -r server
              sudo usermod -aG docker ${{ env.SERVER_USER }}
              sudo service docker restart
              sudo docker logout
              sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              sudo docker compose pull
              sudo docker compose down
              sudo docker compose up -d && sudo docker image prune -f

  test-react:
    needs:
      - build-react
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yarn deps
        working-directory: frontend
        run: yarn install
      - name: Run testing
        working-directory: frontend
        run: yarn test

  deploy-react:
    needs:
        - test-react
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: restore built files frontend
        uses: actions/download-artifact@v3
        with:
          name: build
          path: frontend/build
      - name: check built files in server
        working-directory: frontend
        run: |
          ls build/index.html
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - name: deploy to s3 and cloudfront
        working-directory: frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        run: |
          aws s3 sync ./build s3://${{env.BUCKET_NAME}} --delete
          aws cloudfront create-invalidation --distribution-id ${{env.CLOUDFRONT_DISTRIBUTION}} --paths "/*"